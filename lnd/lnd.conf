[Application Options]

listen=10.254.2.3:9735
rpclisten=0.0.0.0:10009
restlisten=10.254.2.3:8080
maxpendingchannels=3
minchansize=10000
alias=LNCM Default Box
color=#ffe200
accept-keysend=true

tlsextradomain=lnd
tlsextraip=10.254.2.3
; v0.10.X directive. We are using the latest anyway
tlsautorefresh=1
; Add external address for TLS
;externalip=externaladdress

; Makes routing faster but have to use images built with experimental tag
; [Routing]
; routing.assumechanvalid=1

; Default setting currently is neutrino
[Bitcoind]
; The base directory that contains the node's data, logs, configuration file,
; etc.
bitcoind.dir=/srv/bitcoind

bitcoind.rpchost=10.254.2.2
; bitcoind.rpcuser=lncm
; bitcoind.rpcpass=RPCPASS

; ZMQ socket which sends rawblock and rawtx notifications from bitcoind. By
; default, lnd will attempt to automatically obtain this information, so this
; likely won't need to be set (other than for a remote bitcoind instance).
; bitcoind.zmqpubrawblock=tcp://10.254.2.2:28332
; bitcoind.zmqpubrawtx=tcp://10.254.2.2:28333

; Fee estimate mode for bitcoind. It must be either "ECONOMICAL" or "CONSERVATIVE".
; If unset, the default value is "CONSERVATIVE".
; bitcoind.estimatemode=CONSERVATIVE
; Use low fees because we don't want to overpay miners
bitcoind.estimatemode=ECONOMICAL

[Bitcoin]
; If the Bitcoin chain should be active. Atm, only a single chain can be
; active.
bitcoin.active=1
; Change 'bitcoin.mainnet=1' to 'bitcoin.testnet=1' if TESTNET or bitcoin.regtest=1 if REGTEST
bitcoin.mainnet=1
; Use the bitcoind back-end
bitcoin.node=bitcoind
; Use neutrino for now, but maybe it could be permanent and then switch
; to a full node once its working?
; bitcoin.node=neutrino
bitcoin.defaultchanconfs=3

; The default number of blocks we will require our channel counterparty to wait
; before accessing its funds in case of unilateral close. If this is not set, we
; will scale the value according to the channel size.
; bitcoin.defaultremotedelay=144

; The maximum number of blocks we will limit the wait that our own funds are
; encumbered by in the case when our node unilaterally closes. If a remote peer
; proposes a channel with a delay above this amount, lnd will reject the
; channel.
; bitcoin.maxlocaldelay=2016

; The smallest HTLC we are willing to accept on our channels, in millisatoshi.
; bitcoin.minhtlc=1

; The smallest HTLC we are willing to send out on our channels, in millisatoshi.
; bitcoin.minhtlcout=1000

; The base fee in millisatoshi we will charge for forwarding payments on our
; channels.
; bitcoin.basefee=1000

; The fee rate used when forwarding payments on our channels. The total fee
; charged is basefee + (amount * feerate / 1000000), where amount is the
; forwarded amount.
; bitcoin.feerate=1

; The CLTV delta we will subtract from a forwarded HTLC's timelock value.
; bitcoin.timelockdelta=40

; The seed DNS server(s) to use for initial peer discovery. Must be specified as
; a '<primary_dns>[,<soa_primary_dns>]' tuple where the SOA address is needed
; for DNS resolution through Tor but is optional for clearnet users. Multiple
; tuples can be specified, will overwrite the default seed servers.
; The default seed servers are:
;  mainnet:
;    bitcoin.dnsseed=nodes.lightning.directory,soa.nodes.lightning.directory
;    bitcoin.dnsseed=lseed.bitcoinstats.com

[neutrino]
; Mainnet peers are discovered automatically
; These are testnet neutrino peers
;neutrino.addpeer=testnet1-btcd.zaphq.io
;neutrino.addpeer=testnet2-btcd.zaphq.io

[autopilot]
; Enable autopilot
autopilot.active=false
; Max 5 channels
autopilot.maxchannels=5
; 85% of funds will be in a channel
autopilot.allocation=0.85

; The fraction of total funds that should be committed to automatic channel
; establishment. For example 0.6 means that 60% of the total funds available
; within the wallet should be used to automatically establish channels. The total
; amount of attempted channels will still respect the maxchannels param.
; autopilot.allocation=0.6

; Heuristic to activate, and the weight to give it during scoring. (default:
; top_centrality:1)
; autopilot.heuristic=preferential:1

; The smallest channel that the autopilot agent should create (default: 20000)
; autopilot.minchansize=20000

; The largest channel that the autopilot agent should create (default: 16777215)
; autopilot.maxchansize=20000

; Whether the channels created by the autopilot agent should be private or not.
; Private channels won't be announced to the network.
; autopilot.private=true

; The minimum number of confirmations each of your inputs in funding transactions
; created by the autopilot agent must have. (default: 1)
; autopilot.minconfs=2

; The confirmation target (in blocks) for channels opened by autopilot. (default:
; 3)
; autopilot.conftarget=2

; activate watchtowers so we have a strong watchtower network
[watchtower]
watchtower.active=1

; activate watchtower client so we can get get other servers
; to make sure noone steals our money
[wtclient]
wtclient.active=1

[tor]
tor.active=1
tor.control=10.254.1.3:29051
tor.socks=10.254.1.3:29050

; The password used to arrive at the HashedControlPassword for the control port.
; If provided, the HASHEDPASSWORD authentication method will be used instead of
; the SAFECOOKIE one.
; tor.password=lncmrocks

tor.targetipaddress=10.254.2.3
tor.v3=true
tor.dns=soa.nodes.lightning.directory:53

; Enable Tor stream isolation by randomizing user credentials for each
; connection. With this mode active, each connection will use a new circuit.
; This means that multiple applications (other than lnd) using Tor won't be mixed
; in with lnd's traffic.
; tor.streamisolation=true

[healthcheck]
; The number of times we should attempt to query our chain backend before
; gracefully shutting down. Set this value to 0 to disable this health check.
; healthcheck.chainbackend.attempts=3

; The amount of time we allow a call to our chain backend to take before we fail
; the attempt. This value must be >= 1s.
; healthcheck.chainbackend.timeout=10s

; The amount of time we should backoff between failed attempts to query chain
; backend. This value must be >= 1s.
; healthcheck.chainbackend.backoff=30s

; The amount of time we should wait between chain backend health checks. This
; value must be >= 1m.
; healthcheck.chainbackend.interval=1m

; The minimum ratio of free disk space to total capacity that we require.
; healthcheck.diskspace.diskrequired=0.1

; The number of times we should attempt to query our available disk space before
; gracefully shutting down. Set this value to 0 to disable this health check.
; healthcheck.diskspace.attempts=2

; The amount of time we allow a query for our available disk space to take
; before we fail the attempt. This value must be >= 1s.
; healthcheck.diskspace.timeout=5s

; The amount of time we should backoff between failed attempts to query
; available disk space. This value must be >= 1s.
; healthcheck.diskspace.backoff=1m

; The amount of time we should wait between disk space health checks. This
; value must be >= 1m.
; healthcheck.diskspace.interval=6h

[signrpc]

; Path to the signer macaroon.
; signrpc.signermacaroonpath=~/.lnd/data/chain/bitcoin/simnet/signer.macaroon

[walletrpc]

; Path to the wallet kit macaroon.
; walletrpc.walletkitmacaroonpath=~/.lnd/data/chain/bitcoin/simnet/walletkit.macaroon

[chainrpc]

; Path to the chain notifier macaroon.
; chainrpc.notifiermacaroonpath=~/.lnd/data/chain/bitcoin/simnet/chainnotifier.macaroon

[routerrpc]
; Minimum required route success probability to attempt the payment (default:
; 0.01)
; routerrpc.minrtprob=1

; Assumed success probability of a hop in a route when no other information is
; available. (default: 0.6)
; routerrpc.apriorihopprob=0.2

; Weight of the a priori probability in success probability estimation. Valid
; values are in [0, 1]. (default: 0.5)
; routerrpc.aprioriweight=0.3

; Defines the duration after which a penalized node or channel is back at 50%
; probability (default: 1h0m0s)
; routerrpc.penaltyhalflife=2h

; The (virtual) fixed cost in sats of a failed payment attempt (default: 100)
; routerrpc.attemptcost=90

; The (virtual) proportional cost in ppm of the total amount of a failed payment
; attempt (default: 1000)
; routerrpc.attemptcostppm=900

; The maximum number of payment results that are held on disk by mission control
; (default: 1000)
; routerrpc.maxmchistory=900

; Path to the router macaroon
; routerrpc.routermacaroonpath=~/.lnd/data/chain/bitcoin/simnet/router.macaroon

[workers]
; Maximum number of concurrent read pool workers. This number should be
; proportional to the number of peers. (default: 100)
; workers.read=200

; Maximum number of concurrent write pool workers. This number should be
; proportional to the number of CPUs on the host.  (default: 8)
; workers.write=8

; Maximum number of concurrent sig pool workers. This number should be
; proportional to the number of CPUs on the host. (default: 8)
; workers.sig=4

[caches]

; Maximum number of entries contained in the reject cache, which is used to speed
; up filtering of new channel announcements and channel updates from peers. Each
; entry requires 25 bytes. (default: 50000)
; caches.reject-cache-size=900000

; Maximum number of entries contained in the channel cache, which is used to
; reduce memory allocations from gossip queries from peers. Each entry requires
; roughly 2Kb. (default: 20000)
; caches.channel-cache-size=9000000

[protocol]
; If set, then lnd will create and accept requests for channels larger than 0.16
; BTC
; protocol.wumbo-channels=true

; Set to enable experimental support for anchor commitments, won't work with watchtowers yet.
; protocol.anchors=true

[db]
; The selected database backend. The current default backend is "bolt". lnd
; also has experimental support for etcd, a replicated backend.
; db.backend=bolt

[etcd]
; Etcd database host.
; db.etcd.host=localhost:2379

; Etcd database user.
; db.etcd.user=userscopedforlnd

; Password for the database user.
; db.etcd.pass=longandsekrit

; Path to the TLS certificate for etcd RPC.
; db.etcd.cert_file=/key/path

; Path to the TLS private key for etcd RPC.
; db.etcd.key_file=/a/path

; Whether we intend to skip TLS verification
; db.etcd.insecure_skip_verify=true

; Whether to collect etcd commit stats.
; db.etcd.collect_stats=true

; If set LND will use an embedded etcd instance instead of the external one.
; Useful for testing.
; db.etcd.embedded=false

[bolt]
; If true, prevents the database from syncing its freelist to disk. 
; db.bolt.nofreelistsync=1

; Whether the databases used within lnd should automatically be compacted on
; every startup (and if the database has the configured minimum age). This is
; disabled by default because it requires additional disk space to be available
; during the compaction that is freed afterwards. In general compaction leads to
; smaller database files.
; db.bolt.auto-compact=true

; How long ago the last compaction of a database file must be for it to be
; considered for auto compaction again. Can be set to 0 to compact on every
; startup. (default: 168h)
; db.bolt.auto-compact-min-age=0
